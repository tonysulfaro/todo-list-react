{"version":3,"sources":["Todo.jsx","TodoInput.jsx","App.js","serviceWorker.js","index.js"],"names":["Todo","todo","index","DeleteTodo","CompleteTodo","className","task","description","onClick","TodoInput","AddTodo","useState","setTodo","setDescription","onSubmit","e","preventDefault","completed","type","value","onChange","target","App","todos","setTodos","newTodos","splice","alert","push","map","key","toString","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2QAsBeA,MApBf,YAAwD,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,aACpC,OACI,yBAAKC,UAAU,QACX,4BAAKJ,EAAKK,MACV,2BAAIL,EAAKM,aACT,4BACIC,QAAS,WACLL,EAAWD,KAFnB,UAMA,4BACIM,QAAS,WACLJ,EAAaF,KAFrB,cCsBGO,MAjCf,YAA8B,IAAVC,EAAS,EAATA,QAAS,EAEDC,mBAAS,IAFR,mBAElBV,EAFkB,KAEZW,EAFY,OAGcD,mBAAS,IAHvB,mBAGlBJ,EAHkB,KAGLM,EAHK,KAKzB,OACI,0BACIC,SAAY,SAACC,GACTA,EAAEC,iBACFN,EAAQ,CAACJ,KAAML,EAAMM,YAAYA,EAAaU,WAAU,IACxDL,EAAQ,IACRC,EAAe,MAGnB,oCACA,2BAAOK,KAAK,OACZC,MAAOlB,EACPmB,SAAU,SAACL,GACPH,EAAQG,EAAEM,OAAOF,UAGrB,2CACA,2BAAOD,KAAK,OACZC,MAAOZ,EACPa,SAAU,SAACL,GACPF,EAAeE,EAAEM,OAAOF,UAG5B,4BAAQD,KAAK,UAAb,cCqBGI,MA9Cf,WAAgB,IAAD,EAEaX,mBAAS,CAAC,CAACL,KAAK,gBAAiBC,YAAa,uCAAwCU,WAAU,KAF7G,mBAENM,EAFM,KAECC,EAFD,KAUb,SAASrB,EAAWD,GAClB,IAAMuB,EAAQ,YAAOF,GACrBE,EAASC,OAAOxB,EAAO,GACvBsB,EAASC,GAGX,SAASrB,EAAaF,GACpB,IAAMuB,EAAQ,YAAOF,GACrBE,EAASvB,GAAOe,WAAY,EAC5BO,EAASC,GACTE,MAAMJ,EAAMrB,GAAOI,KAAO,cAG5B,OACE,yBAAKD,UAAU,aACb,yCACA,kBAAC,EAAD,CAAWK,QAtBf,SAAiBT,GACf,IAAMwB,EAAQ,YAAOF,GACrBE,EAASG,KAAK3B,GACduB,EAASC,MAqBP,yBAAKpB,UAAU,kBACZkB,EAAMM,KAAI,SAAC5B,EAAMC,GAChB,OACE,kBAAC,EAAD,CACE4B,IAAK5B,EAAM6B,WACX9B,KAAMA,EACNC,MAAOA,EACPC,WAAYA,EACZC,aAAcA,UC7BR4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.061a8fa9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Todo({todo, index, DeleteTodo, CompleteTodo}) {\r\n    return (\r\n        <div className=\"todo\">\r\n            <h2>{todo.task}</h2>\r\n            <p>{todo.description}</p>\r\n            <button\r\n                onClick={()=>{\r\n                    DeleteTodo(index)\r\n                }}\r\n            >Delete</button>\r\n\r\n            <button\r\n                onClick={()=>{\r\n                    CompleteTodo(index)\r\n                }}\r\n            >Complete</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo","import React, { useState } from 'react';\r\n\r\nfunction TodoInput({AddTodo}){\r\n\r\n    const [todo, setTodo] = useState('')\r\n    const [description, setDescription] =  useState('')\r\n\r\n    return (\r\n        <form\r\n            onSubmit = {(e) => {\r\n                e.preventDefault()\r\n                AddTodo({task: todo, description:description, completed:false})\r\n                setTodo('')\r\n                setDescription('')\r\n            }}\r\n        >\r\n            <p>Todo:</p>\r\n            <input type=\"text\" \r\n            value={todo}\r\n            onChange={(e) => {\r\n                setTodo(e.target.value)\r\n            }}/>\r\n\r\n            <p>Description:</p>\r\n            <input type=\"text\" \r\n            value={description}\r\n            onChange={(e)=> {\r\n                setDescription(e.target.value)\r\n            }}/>\r\n\r\n            <button type=\"submit\">Add Todo</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TodoInput","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport Todo from './Todo';\r\nimport TodoInput from './TodoInput';\r\n\r\nfunction App() {\r\n\r\n  const [todos, setTodos] = useState([{task:\"get groceries\", description: \"go to kroger to get a gallon of milk\", completed:false}])\r\n  \r\n  function AddTodo(todo){\r\n    const newTodos = [...todos]\r\n    newTodos.push(todo)\r\n    setTodos(newTodos)\r\n  }\r\n\r\n  function DeleteTodo(index){\r\n    const newTodos = [...todos]\r\n    newTodos.splice(index, 1)\r\n    setTodos(newTodos)\r\n  }\r\n\r\n  function CompleteTodo(index){\r\n    const newTodos = [...todos]\r\n    newTodos[index].completed = true\r\n    setTodos(newTodos)\r\n    alert(todos[index].task + ' completed')\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>TODO List</h1>\r\n      <TodoInput AddTodo={AddTodo}></TodoInput>\r\n\r\n      <div className=\"todo-container\">\r\n        {todos.map((todo, index) => {\r\n          return (\r\n            <Todo \r\n              key={index.toString()} \r\n              todo={todo} \r\n              index={index} \r\n              DeleteTodo={DeleteTodo}\r\n              CompleteTodo={CompleteTodo}\r\n              >\r\n            </Todo>\r\n          )\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}